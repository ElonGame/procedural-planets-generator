#version 430
[ComputeShader]





// functions
uniform vec4 pParam = vec4(289.0, 34.0, 1.0, 7.0);
// Example constant with a 289 element permutation
//const vec4 pParam = vec4( 17.0*17.0, 34.0, 1.0, 7.0);

vec3 permute(vec3 x0,vec3 p) { 
	vec3 x1 = mod(x0 * p.y, p.x);
	return floor(  mod( (x1 + p.z) *x0, p.x ));
}

float simplex_noise2(vec2 v) {
	const vec2 C = vec2(0.211324865405187134, // (3.0-sqrt(3.0))/6.;
		                0.366025403784438597); // 0.5*(sqrt(3.0)-1.);
	const vec3 D = vec3( 0., 0.5, 2.0) * 3.14159265358979312;

	// First corner
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);

	// Other corners
	vec2 i1  =  (x0.x > x0.y) ? vec2(1.,0.) : vec2(0.,1.) ;

	//  x0 = x0 - 0. + 0. * C
	vec2 x1 = x0 - i1 + 1. * C.xx ;
	vec2 x2 = x0 - 1. + 2. * C.xx ;

	// Permutations
	i = mod(i, pParam.x);
	vec3 p = permute( permute( 
		     i.y + vec3(0., i1.y, 1. ), pParam.xyz)
		   + i.x + vec3(0., i1.x, 1. ), pParam.xyz);

	// ( N points uniformly over a line, mapped onto a diamond.)
	vec3 x = fract(p / pParam.w) ;
	vec3 h = 0.5 - abs(x) ;

	vec3 sx = vec3(lessThan(x,D.xxx)) *2. -1.;
	vec3 sh = vec3(lessThan(h,D.xxx));

	vec3 a0 = x + sx*sh;
	vec2 p0 = vec2(a0.x,h.x);
	vec2 p1 = vec2(a0.y,h.y);
	vec2 p2 = vec2(a0.z,h.z);
	vec3 g = 2.0 * vec3( dot(p0, x0), dot(p1, x1), dot(p2, x2) );

	// mix
	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.);
	m = m*m ;
	return 1.66666* 70.*dot(m*m, g);
}


// procedural fBm (p.437)
float fBm(vec2 p, float H, float lacunarity, int octaves) {
	float value = 0.0;
	for(int i=0;i<octaves; ++i) {
		value+= simplex_noise2(p) * pow(lacunarity, -H*i);
		p*= lacunarity;
	}
	return value;
}

// simple multifractal (p.440)
float fBm2(vec2 p, float H, float lacunarity, int octaves, float offset) {
	float value = 1.0;
	for(int i=0;i<octaves; ++i) {
		value*= (simplex_noise2(p)+offset) * pow(lacunarity, -H*i);
		p*= lacunarity;
	}
	return value;
}

// ridged multifractal terrain (p.504)
float fBm3(vec2 p, float H, float lacunarity, int octaves, float offset, float gain) {
	float result, frequency, signal, weight;

	frequency = 1.0;

	signal = offset - abs(simplex_noise2(p));
	signal*= signal;
	result = signal;
	weight = 1.0;

	for(int i=1; i<octaves; ++i) {
		p*= lacunarity;
		weight = clamp(signal*gain, 0.0,1.0);
		signal = offset - abs(simplex_noise2(p));
		signal*= signal*weight;
		result+= signal * pow(frequency, -H);
		frequency*= lacunarity;
	}

	return result;

}











// taken from: https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl

//
// Description : Array and textureless GLSL 2D/3D/4D simplex 
//               noise functions.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : stegu
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//               https://github.com/stegu/webgl-noise
// 

vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }







uniform float planetRadius;
uniform vec3 offsetFromPlanetCenter;
uniform int numberOfVerticesOnEdge;
uniform vec3 cornerPositionA;
uniform vec3 cornerPositionB;
uniform vec3 cornerPositionC;

struct vec3_struct
{
    float x;
    float y;
    float z;
};
struct vec2_struct
{
    float x;
    float y;
    float z;
};

layout( binding=0 ) buffer buffer1 {
    vec3_struct pos[ ];
};
layout( binding=1 ) buffer buffer2 {
    vec3_struct normal[ ];
};
layout( binding=2 ) buffer buffer3 {
    vec2_struct uv[ ];
};
 
layout( local_size_x = 1, local_size_y = 1, local_size_z = 1 ) in;
 








vec3 fromStruct(vec3_struct p)
{
	return vec3(p.x, p.y, p.z);
}
vec3_struct toStruct(vec3 p)
{
	vec3_struct s;
	s.x = p.x;
	s.y = p.y;
	s.z = p.z;
	return s;
}


void main() {
	
	int invocationId = int(gl_GlobalInvocationID.x);
	int id = invocationId;
	int ix = 0;
	int iy = 0;
		
	int numberOfVerticesOnLine = 1;
	while(id >= numberOfVerticesOnLine && numberOfVerticesOnLine < numberOfVerticesOnEdge)
	{
		id -= numberOfVerticesOnLine;
		numberOfVerticesOnLine++;
		iy++;
	}
	ix = id;

	float x = float(ix) / (numberOfVerticesOnEdge-1);
	float y = float(iy) / (numberOfVerticesOnEdge-1);

	vec3 p = 
		cornerPositionA + 
		(cornerPositionB - cornerPositionA) * y * (1-x) + 
		(cornerPositionC - cornerPositionA) * y * x;

	//p = normalize(p);

	p = p - offsetFromPlanetCenter;	
	//p = p * planetRadius * snoise(vec3(p)) - offsetFromPlanetCenter;

	// DEBUG
	//vec3 p = fromStruct(pos[invocationId]);
	//p.x += 0.01f;

	pos[invocationId] = toStruct(vec3(p));
 
}