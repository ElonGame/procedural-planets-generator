#version 430
[ComputeShader]
[include shaders/include.planet.glsl]




 
struct vec2_struct
{
    float x;
    float y;
};
vec2 fromStruct(vec2_struct p)
{
	return vec2(p.x, p.y);
}
vec2_struct toStruct(vec2 p)
{
	vec2_struct s;
	s.x = p.x;
	s.y = p.y;
	return s;
}


struct vec3_struct
{
    float x;
    float y;
    float z;
};
vec3 fromStruct(vec3_struct p)
{
	return vec3(p.x, p.y, p.z);
}
vec3_struct toStruct(vec3 p)
{
	vec3_struct s;
	s.x = p.x;
	s.y = p.y;
	s.z = p.z;
	return s;
}


struct vec4_struct
{
    float x;
    float y;
    float z;
    float w;
};
vec4 fromStruct(vec4_struct p)
{
	return vec4(p.x, p.y, p.z, p.w);
}
vec4_struct toStruct(vec4 p)
{
	vec4_struct s;
	s.x = p.x;
	s.y = p.y;
	s.z = p.z;
	s.w = p.w;
	return s;
}

layout(rgba8, binding = 0) uniform writeonly image2D param_segmentNormalMap;

layout( local_size_x = 16, local_size_y = 16 ) in;
 

uniform dvec3 param_offsetFromPlanetCenter;
uniform int param_numberOfVerticesOnEdge;
uniform dvec3 param_cornerPositionA;
uniform dvec3 param_cornerPositionB;
uniform dvec3 param_cornerPositionC;
uniform int param_indiciesCount;
uniform int param_verticesStartIndexOffset;


double GetHeight(dvec3 surfacePosition)
{
	return GetProceduralHeight(vec3(normalize(surfacePosition)));
}

void main() {

  	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

	vec4 pixel = vec4(0);

	vec2 baricentric = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y) / imageSize(param_segmentNormalMap);

	dvec3 positionInterpolated = 
		param_cornerPositionA + 
		(param_cornerPositionB - param_cornerPositionA) * baricentric.y * (1-baricentric.x) + 
		(param_cornerPositionC - param_cornerPositionA) * baricentric.y * baricentric.x;

	dvec3 positionInterpolatedNormalized = normalize(positionInterpolated);
	vec3 dirFromPlanetCenter = vec3(positionInterpolatedNormalized);

	vec2 spherical = calestialToSpherical(vec3(dirFromPlanetCenter)).xy;


	//vec3 N = vec3(dirFromPlanetCenter);
	//vec3 T = 

	dvec3 surfacePosition = positionInterpolatedNormalized * param_radiusMin;

	vec3 normal = vec3(0);

	vec3 N;
	vec3 T;

	{
		float eps = 0.0001;
		vec2 uvA = spherical + vec2(0,eps);
		vec2 uvB = spherical + vec2(-eps,0);
		vec2 uvC = spherical + vec2(eps,0);

		vec3 posA = sphericalToCalestial(uvA);
		vec3 posB = sphericalToCalestial(uvB);
		vec3 posC = sphericalToCalestial(uvC);

		vec3 posAToB = posB - posA;
		vec3 posAToC = posC - posA;
		N = normalize(cross(normalize(posAToB), normalize(posAToC)));

		vec2 uvAToB = uvB - uvA;
		vec2 uvAToC = uvC - uvA;
		float r = 1.0f / (uvAToB.x * uvAToC.y - uvAToB.y * uvAToC.x);
		T = (posAToB * uvAToC.y - posAToC * uvAToB.y) * r;
	}
	vec3 T2 = T - N * dot(N, T); // Gram-Schmidt orthogonalization of T
	vec3 B = normalize(cross(N,T2));


	{
		float eps = 0.1;
	    double z = GetHeight(surfacePosition); 
	    normal.x = float(
	    	(GetHeight(surfacePosition-T*eps) - z)
	    	-(GetHeight(surfacePosition+T*eps) - z)
	    ) / 2;
	    normal.y = float(
	    	(GetHeight(surfacePosition-B*eps) - z)
	    	-(GetHeight(surfacePosition+B*eps) - z)
	    ) / 2;
	    normal.z = eps * 4;
	}

	//normal = GetProceduralAndBaseHeightMapNormal(spherical, 0.00005);
	//normal += GetGeneratedNormal(dirFromPlanetCenter, T, B, 0.00000005);
	//normal += GetGeneratedNormal(dirFromPlanetCenter, T, B, 0.0000001);

	normal = normalize(normal);
	normal = (1 + normal) / 2; // pack into texture
	pixel = vec4(normal, 1);

	//DEBUG
	//pixel=vec4(float(gl_GlobalInvocationID.x)/1024.0, float(gl_GlobalInvocationID.y)/1024.0, 1.0, 1.0);
	imageStore(param_segmentNormalMap, pixelCoords, pixel);
}

