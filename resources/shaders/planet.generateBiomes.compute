#version 430
[ComputeShader]
[include shaders/include.planet.glsl]
#line 5



struct vec2_struct
{
    float x;
    float y;
};
vec2 fromStruct(vec2_struct p)
{
	return vec2(p.x, p.y);
}
vec2_struct toStruct(vec2 p)
{
	vec2_struct s;
	s.x = p.x;
	s.y = p.y;
	return s;
}


struct vec3_struct
{
    float x;
    float y;
    float z;
};
vec3 fromStruct(vec3_struct p)
{
	return vec3(p.x, p.y, p.z);
}
vec3_struct toStruct(vec3 p)
{
	vec3_struct s;
	s.x = p.x;
	s.y = p.y;
	s.z = p.z;
	return s;
}


struct vec4_struct
{
    float x;
    float y;
    float z;
    float w;
};
vec4 fromStruct(vec4_struct p)
{
	return vec4(p.x, p.y, p.z, p.w);
}
vec4_struct toStruct(vec4 p)
{
	vec4_struct s;
	s.x = p.x;
	s.y = p.y;
	s.z = p.z;
	s.w = p.w;
	return s;
}



layout( binding=0 ) buffer buffer0 {
    vec3_struct positions[];
};
layout( binding=1 ) buffer buffer1 {
    vec3_struct normals[];
};
layout( binding=2 ) buffer buffer2 {
    vec2_struct uvs[];
};
layout( binding=3 ) buffer buffer3 {
    int indicies[];
};
layout( binding=4 ) buffer buffer4 {
    vec4_struct out_biomes1[];
};
layout( binding=5 ) buffer buffer5 {
    vec4_struct out_biomes2[];
};


layout( local_size_x = 1, local_size_y = 1, local_size_z = 1 ) in;


uniform dvec3 param_offsetFromPlanetCenter;
uniform int param_numberOfVerticesOnEdge;
uniform dvec3 param_cornerPositionA;
uniform dvec3 param_cornerPositionB;
uniform dvec3 param_cornerPositionC;
uniform int param_indiciesCount;
uniform int param_verticesStartIndexOffset;






void main() {

	int verticeIndex = int(gl_GlobalInvocationID.x) + param_verticesStartIndexOffset;

	vec3 position = fromStruct(positions[verticeIndex]);
	vec3 normal = fromStruct(normals[verticeIndex]);
	vec2 uv = fromStruct(uvs[verticeIndex]);
	vec4 biomes1 = fromStruct(out_biomes1[verticeIndex]);
	vec4 biomes2 = fromStruct(out_biomes2[verticeIndex]);

	dvec3 planetPosition = position + param_offsetFromPlanetCenter;
	vec3 dirFromPlanet = vec3(normalize(planetPosition));

	// passed from generate heights shader
	float altFromBottomOfSea = biomes1.x;
	float humidity = biomes1.y;

	biomes1 = vec4(0);
	biomes2 = vec4(0);

	//altFromSea /= (param_baseHeightMapMultiplier + param_noiseMultiplier);
	//if(altFromBottomOfSea < 0.5) { color=vec3(0,0,1); return; }
	float altFromSea = altFromBottomOfSea-0.5;

	// 1 at meridian.. 0 at poles
	float distanceFromPoles = 1 - abs(uv.y - 0.5) * 2;
	float temperature = (1 - abs(altFromSea)) * distanceFromPoles;

	vec3 biome = texture2D(param_biomesControlMap, vec2(temperature, humidity)).rgb;

#define TRY_BIOME(ID, CHANNEL) \
	if(distance(param_biome##ID##CHANNEL##_color, biome) < 0.01) { \
		biomes##ID##.##CHANNEL = 1; \
	}

    TRY_BIOME(1,r)
    TRY_BIOME(1,g)
    TRY_BIOME(1,b)
    TRY_BIOME(1,a)
    TRY_BIOME(2,r)
    TRY_BIOME(2,g)
    TRY_BIOME(2,b)
    TRY_BIOME(2,a)

	// 1 = super steep, 0 = flat
	float steepness = 1-clamp(dot(normal, dirFromPlanet), 0, 1); 	
	biomes1.y += smoothstep(0.29, 0.3, steepness) * 10;


    //biomes1 = clamp(biomes1, 0, 1);
    //biomes2 = clamp(biomes2, 0, 1);

	float sum = 
		biomes1.x + biomes1.y + biomes1.z + biomes1.w +
		biomes2.x + biomes2.y + biomes2.z + biomes2.w;

	biomes1 /= sum;
	biomes2 /= sum;

	out_biomes1[verticeIndex] = toStruct(biomes1);
	out_biomes2[verticeIndex] = toStruct(biomes2);

}

